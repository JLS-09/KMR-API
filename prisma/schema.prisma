// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Mod {
  identifier          String    @id @unique
  name                String
  abstract            String
  author              Author[]
  description         String?
  ksp_version         String?   @default("any")
  ksp_version_min     String?
  ksp_version_max     String?
  ksp_version_strict  Boolean?  @default(false)
  tags                Json?
  localizations       Json?

  relationships       Relationship[] // A mod's outgoing relationships
  replacement         ReplacedBy?
}

model Version {
  id                      Int             @id @default(autoincrement())
  spec_version            Int
  download                String
  license                 String
  version                 String
  epoch                   Int             @default(0)
  mod_version             String
  install                 Install[]
  comment                 String?
  download_size           Int?
  download_hash           Download_hash?
  download_content_type   String?
  install_size            Int?
  release_date            DateTime?
  release_status          String?
  relationships           Relationship[]
  resources               Resources?
  kind                    String?
  provides                Json?
}

model Author {
  id    Int     @id @default(autoincrement())
  name  String
  mods  Mod[]
}

model Install {
  id                    Int       @id @default(autoincrement())
  file                  String?
  find                  String?
  find_regexp           String?
  install_to            String
  as                    String?
  filter                String?
  filter_regexp         String?
  include_only          String?
  include_only_regexp   String?
  find_matches_files    String?
  version               Version   @relation(fields: [versionId], references: [id])
  versionId             Int
}

model Download_hash {
  id          Int       @id @default(autoincrement())
  sha1        String?
  sha256      String?
  version     Version   @relation(fields: [versionId], references: [id])
  versionId   Int       @unique
}

model Relationship {
  id                        Int       @id @default(autoincrement())
  type                      String    // "depends", "recommends", "suggests", "conflicts", etc
  choice_help_text          String?
  suppress_recommendations  Boolean? @default(false)

  modIdentifier String
  mod           Mod       @relation(fields: [modIdentifier], references: [identifier])

  // Normal direct relation OR part of an any_of group
  targetVersionId   Int?      // When this relationship points directly to a version
  targetVersion     Version?      @relation(fields: [targetVersionId], references: [id])

  anyOfGroupId  Int?      // If this is part of an any_of group
  anyOfGroup    AnyOfGroup? @relation(fields: [anyOfGroupId], references: [id])

  min_version   String?
  max_version   String?
  version       String?
}

model AnyOfGroup {
  id             Int             @id @default(autoincrement())
  relationships  Relationship[]
}

model ReplacedBy {
  id             Int      @id @default(autoincrement())
  modIdentifier  String   @unique
  mod            Mod      @relation(fields: [modIdentifier], references: [identifier])

  name           String

  version        String?
  min_version    String?
}

model Resources {
  id Int @id @default(autoincrement())
  homepage String?
  bugtracker String?
  discussions String?
  license String?
  repository String?
  ci String?
  spacedock String?
  curse String?
  manual String?
  metanetkan String?
  remote_avc String?
  remote_swinfo String?
  store String?
  steamstore String?
  version Version @relation(fields: [versionId], references: [id])
  versionId Int @unique
}
